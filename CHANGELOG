About
=====

This file serves as a nonexhaustive changelog that documents new
features/fixes/improvements/etc. in each e4 release. The contents of
each version entry are moved directly from the TODO file immediately
prior to each release.

To find the commit in which a specific change mentioned here was made,
consult the blame of the TODO file in the commit immediately preceding
the tagged release commit. In general, the most detailed record of work
included in any given version is the commit log itself.

Version 0.2.1
=============

Build
-----
- [DONE] Fix all pedantic errors and build with -Wpedantic.
- [DONE] Ensure tests pass correctly using both Clang and GCC.


Version 0.2.0
=============

Build
-----
- [DONE] Add preprocessor controls for disabling various wordsets to
  produce a minimal build.
- [DONE] Create a special Make target that tests building various
  build configurations to ensure they call build properly and there
  are no erroneous interdependencies between wordsets.

Compilation
-----------
- [DONE] Implement compiletime BRANCH and BRANCH0 builtins.
- [DONE] Add conditional structure words like IF, ELSE, and THEN.
- [DONE] Implement RECURSE. This is easy to do since RECURSE only needs
  to compile in the address of the XT of the current dictionary entry.
- [DONE] Implement  BEGIN, UNTIL, AGAIN, WHILE, and REPEAT.
- [DONE] Implement DO, ?DO, LOOP, LOOP+, and LEAVE.
- [DONE] Implement I, J, and UNLOOP.
- [DONE] Rename LITERAL to LIT_CELL and DLITERAL to LIT_DOES.
- [DONE] Implement LITERAL.
- [DONE] Implement [ and ].
- [DONE] Implement MARKER.
- [DONE] Implement LIT_CSTR and LIT_STR.
- [DONE] Add POSTPONE and IMMEDIATE words.
- [DONE] Add restrict keyword.
- [DONE] Check for nested compilation everywhere relevant.

General Builtins
----------------
- [DONE] Implement core builtin logic/comparison words: = < > 0< 0= AND
  INVERT NEGATE OR XOR.
- [DONE] Implement *.
- [DONE] Implement /, MOD, /MOD.
- [DONE] Implement U<.
- [DONE] Add macro handling for implementing some builtins as threaded
  code and refactor those builtins to be  implemented in threaded code.
- [DONE] Throw division by zero exceptions where necessary.
- [DONE] Refactor builtin XT table to not include unused data field.
- [DONE] Implement core extension logic/comparison words: 0<> 0> <> U>.
- [DONE] Implement ( and \.
- [DONE] Implement 1+, 1-, 2*, 2/, LSHIFT, and RSHIFT.
- [DONE] Implement CELL+, CHAR+, and CHARS.
- [DONE] Implement ALIGN and ALIGNED.
- [DONE] Implement C@, C,, and C!.
- [DONE] Implement >R, R>, R@.
- [DONE] Implement MIN and MAX.
- [DONE] Implement HEX and DECIMAL.
- [DONE] Add support for "pun" builtins (builtins that simply execute
  another builtin, potentially with different flags). Update the BEGIN
  implementation in this way (as compiletime immediate HERE).
- [DONE] Implement NIP and PICK.
- [DONE] Implement 2DUP, 2DROP, 2OVER, 2SWAP.
- [DONE] Implement 2!, 2@, and +!.
- [DONE] Implement 2>R, 2R>, and 2R@.
- [DONE] Use 2DUP, 2DROP, etc. where appropriate (in builtin
  definitons).
- [DONE] Implement COUNT and TYPE.
- [DONE] Implement C", S", and ." (compile time semantics only).
- [DONE] Implement C", S", and ." compile time semantics in terms of
  e4__io_parse.
- [DONE] Implement S\" compile time semantics.
- [DONE] Implement the DUMP builtin.
- [DONE] Implement .( and ." run time semantics.
- [DONE] Make IMMEDIATE/COMPONLY flag specification order consistent in
  builtin declarations.
- [DONE] Implement ABS.
- [DONE] Implement FILL, ERASE, and MOVE builtins.
- [DONE] Implement BUFFER: builtin.
- [DONE] Implement UNUSED builtin.
- [DONE] Implement EVALUATE and SOURCE-ID builtins.
- [DONE] Implement the KEY builtin.
- [DONE] Implement THROW and CATCH builtins.
- [DONE] Implement ?DUP, CHAR, [CHAR], SPACE, and SPACES.

Kernel
------
- [DONE] Throw exceptions in the event of return stack corruption.
- [DONE] Ensure tr0 always has a coherent value, especially across
  exceptions. To make tr0 always have a coherent value, it will be
  necessary to at least set it to r0 on task initialization and preserve
  its value across exceptions.
- [DONE] Add asserts that execute_tuple and execute_token field order
  lines up correctly.
- [DONE] Ensure memmove is always called with size_t, not e4__usize.
  It's possible (although unlikely) that these types may not implicitly
  convert between one another without generating a warning.
- [DONE] Print exception description along with number.
- [DONE] Thunk into e4__builtin_exec and return error code.
- [DONE] Thunk into exceptions when evaluating REFILL in QUIT. Cover
  this in tests.

REPL
----
- [DONE] Add tab-completion to the repl.
- [DONE] Simply return e4__E_BYE exception when EOF is encountered.
- [DONE] Implement a custom signal handler for SIGINT and SIGSEGV.
  that raises the appropriate exception when encountered.

Testing
-------
- [DONE] Figure out some way to cover return stack corruption in tests.
- [DONE] Cover the DUMP builtin, the e4__io_dump API, and the
  e4__mem_dump utility.
- [DONE] Cover user IO errors in tests (ie. user provided IO handler
  returns non-zero or IO handler is missing).
- [DONE] Cover return stack underflow in the event of a direct call to
  e4__execute_ret whether exceptions are enabled or not.
- [DONE] Add tests to ensure that return stack coherence tracking(with
  tr0) behaves correctly when exceptions are disabled.
- [DONE] Cover tr0 coherence (with exceptions enabled) in tests. This
  can be done using THROW and CATCH along with r> and >r.


Version 0.1.0
=============

Build
-----
- [DONE] Add an amalgamated source target using amal.rb.
- [DONE] Create a repl build that uses the amalgamated source target.

Compilation
-----------
- [DONE] Refactor dict API into mem_dict API.
- [DONE] Add true dict API that allows creating a new dict entry by
  acting on the task struct and updating HERE and other fields
  appropriately.
- [DONE] Implement simple : compilation.
- [DONE] Check for stack balance at end of compilation. If stack is not
  in the same position as it was at the start of compilation, throw the
  appropriate exception and reject the definition.
- [DONE] Implement :NONAME builtin.
- [DONE] Implement DEFER, DEFER@, and DEFER! builtins.

General Builtins
----------------
- [DONE] Implement basic static manipulation words CLEAR, DEPTH, DROP,
  DUP, OVER, ROT, ROLL, SWAP, and TUCK.
- [DONE] Implement REFILL.
- [DONE] Implement FORGET. It should stop looking once it hits builtin
  words.
- [DONE] Implement CR.
- [DONE] Implement + and -.
- [DONE] Implement ..
- [DONE] Add appropriate asserts to all existing builtins.
- [DONE] Implement WORDS.
- [DONE] Add the ability to add flags to builtins defined with the
  macros in core/builtin.c.
- [DONE] Add compile-time flags to appropriate builtins in
  core/builtin.c.
- [DONE] Implement @ and !.
- [DONE] Implement HERE, CELLS, and ALLOT.
- [DONE] Add mechanism for builtin constants (such as BL, etc.).
- [DONE] Add mechanism for uservar definitions.
- [DONE] Refactor HERE to be a uservar.
- [DONE] Add BASE and PAD builtins.
- [DONE] Add CREATE, VARIABLE, CONSTANT, and , builtins.
- [DONE] Implement ' (LOOKUP builtin; should be case insensitive)
- [DONE] Implement EXECUTE (builtin).
- [DONE] Add VALUE and TO builtins. VALUE and CONSTANT should differ
  in that CONSTANT should have some flag preventing update with TO.
- [DONE] Implement DOES> builtin.
- [DONE] Fix ABORT implementation.
- [DONE] Implement ['] builtin.
- [DONE] Implement simple IO builtins U. and EMIT.

General IO
----------
- [DONE] Implement two's complement integer formatting.

Kernel
------
- [DONE] Move entire builtin dictionary into ROM.
- [DONE] Get rid of fields like POB and SQ and just use HERE instead
  to save space. The dedicated static PAD space can stay.
- [DONE] Create custom integer types that are the same width as e4__cell
  and use these where appropriate (as opposed to unsigned long etc.).
- [DONE] Creating custom integer types for u8 and bool as well rather
  than simply using char.
- [DONE] Implement numeric signed division.
- [DONE] Implement preliminary evaluate utility function.
- [DONE] Implement exceptions using setjmp/longjmp.
- [DONE] Implement QUIT using exceptions etc.
- [DONE] Figure out stack underflow checking for builtins etc.
- [DONE] Implement RET as a utility function and cleanup RET builtin
  definition.
- [DONE] Prevent builtins with the COMPONLY flag set from being
  interpreted.
- [DONE] Cleanup evaluate and evaluate_quit implementation, removing
  unnecessary parameters.
- [DONE] Implement _constant, _variable, and _uservar code handlers.
- [DONE] Implement _thunk code handler (for DOES>).
- [DONE] Always use size or sz as name to indicate size in API
  parameters.
- [DONE] Create e4__io_refill function and use where appropriate rather
  than calling builtin directly.
- [DONE] Consider creating e4__io_word (or something) and moving builtin
  word logic into kernel functions.

Parsing/Text Execution
----------------------
- [DONE] Implement WORD (builtin)
- [DONE] Make existing LOOKUP C API case insensitive?
- [DONE] Fix WORD implementation to correctly advance >IN and also
  to pay attention to count.
- [DONE] Implement >NUMBER (builtin/C API)
- [DONE] Reverse mem_parse API to match mem_number API semantics.

REPL
----
- [DONE] Create actual simple REPL using libedit or some other utility.
- [DONE] Figure out having \n user input print a space rather than
  newline while maintaining all other \n semantics using libedit (or
  otherwise abandon this goal and delete the commented out code in
  repl/main.c).

Testing
-------
- [DONE] Create a test harness.
- [DONE] Finalize test harness organization.
- [DONE] Migrate digit formatting tests.
- [DONE] Migrate basic two's complement tests.
- [DONE] Migrate two's complement signed division tests.
- [DONE] Migrate numeric parsing tests.
- [DONE] Migrate builtin word parsing tests.
- [DONE] Migrate stack API tests.
- [DONE] Migrate >NUMBER builtin tests.
- [DONE] Migrate builtin WORD tests.
- [DONE] Migrate dict entry creation tests.
- [DONE] Add exception tests (see uncommitted diff).
- [DONE] Figure out some way to cover WORDS in tests.
