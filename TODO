General TODO
============

Repo Maintenance
----------------
- Add license text to all source files.
- Update README.rst to actually explain this project.

Build
-----
- Add an amalgamated source target using amal.rb.
- Create a repl build that uses the amalgamated source target.
- Make it possible to disable core extensions for an even smaller build.
- Attempt to set up an AVR build (or some other 8-16 bit target build)
  to determine ROM size in that environment.

Documentation
-------------
- Document all implementation-defined behavior as per Forth 2012 4.1.1.
- Document all ambiguous condition handling as per Forth 2012 4.1.2.
- Provide other system documentation as per by Forth 2012 4.1.3.


Version 0.1
===========

Parsing/Text Execution
----------------------
- [DONE] Implement WORD (builtin)
- [DONE] Make existing LOOKUP C API case insensitive?
- [DONE] Fix WORD implementation to correctly advance >IN and also
  to pay attention to count.
- [DONE] Implement >NUMBER (builtin/C API)
- Implement EVALUATE (builtin/C API) (including figuring out how this
  interacts with TIB and appropriately setting SOURCE-IO).
- Determine if KEY should be writing to TIB.
- Implement LOOKUP (builtin; should be case insensitive)
- Implement EXECUTE (builtin).

General Builtins
----------------
- Implement basic static manipulation words like DUP, DROP, TUCK, etc.
- Implement compiletime BRANCH0, BRANCH, etc.
- Implement FORGET. It should stop looking once it hits builtin words.
- Implement different code handlers _constant, _variable, _thunk, and
  _uservar.
- Add mechanism for builtin constants (such as BL, etc.).

Kernel
------
- [DONE] Move entire builtin dictionary into ROM.
- [DONE] Get rid of fields like POB and SQ and just use HERE instead
  to save space. The dedicated static PAD space can stay.
- Create custom integer types that are the same width as e4__cell and
  use these where appropriate (as opposed to unsigned long etc.).
- Consider creating custom integer types for u8 and u16 as well rather
  than using char and short.
- Implement exceptions using the return stack.
- Figure out stack underflow checking for builtins etc.
- Implement QUIT using setjmp/longjmp.

Compilation
-----------
- Implement simple : compilation.
- Implement VARIABLE and CONSTANT.
- Implement DOES>.

Testing
-------
- Create test harness and add tests for every builtin word as
  prescribed by the standard.

REPL
----
- Create actual simple REPL using readline or some other utility.


Version 0.2
===========

Compilation
-----------
- Add conditional structure words like IF, THEN, BEGIN, WHILE, LOOP,
  DO, etc.
- Figure out how to implement RECURSE.

Kernel
-----
- Add support for double cell numbers (including arithmetic etc.).
- Update words meant to support double width numbers that are currently
  implemented without any such support. This includes >NUMBER.

General Builtins
----------------
- Implement S", S\", and C". These words should use transient memory
  (possibly just HERE) during runtime, but during compile time they
  should compile a string directly into the definition as appropriate.
  This can be achieved by including some word STRING (similar to LIT)
  in the thread that pushes the subsequent counted string onto the
  stack as appropriate and advances the instruction pointer. The
  string should be compiled directly into the definition *with* end
  padding to align.
