General TODO
============

Repo Maintenance
----------------
- Add license text to all source files.
- Update README.rst to actually explain this project.
- Add C++ include guards to all headers.

Build
-----
- Attempt to set up an AVR build (or some other 8-16 bit target build)
  to determine ROM size in that environment. (Preliminary size optimized
  builds seem to be at around 21K when targeting the ATMega328p).


Version 0.3
===========

Build
-----
- [DONE] Split the e4__num namespace into e4__double and e4__usize.
- Split system required words and optional system specific extension
  words into different modules (SYSTEM and SYSTEM-EXT?).
- Consider actually typedefing e4__double. Normally structs in e4 are
  not typedefed, although since struct e4__double is relatively small
  and is always passed/returned by value rather than by reference, it
  may make sense to simply typedef away the fact that it is a struct
  in the first place as a special case. I'm currently leaning towards
  not doing this, but it is still worth consideration.

Compilation
-----------
- Add conditional structure words CASE OF ENDCASE ENDOF etc.
- Implement decompilation (ie. SEE). This only needs to work for words
  defined with execute_threaded to start; everything else can just
  display "builtin." The key way that this can be achieved is by
  placing a special sentinel value on the stack *after* the final EXIT
  call (this can be written by ;). The only other issue is how to
  handle words like THEN etc. This can be done with a little bit of
  look ahead state. If we know that IF is followed by BRANCH then some
  address, then we can simply keep track of what that address is and
  output THEN when we get to that address. We can use the stack for
  this. On function entry, track initial stack count. When IF is
  encountered, push THEN token (assuming we will need to do this with
  something other than THEN as well; we may not, in which case only
  an address is necessary) followed by an address. On each pass, before
  writing anything else, if stack depth is greater than initial depth,
  peek the top. If we're at that address, pop (once or twice, depending
  on whether a THEN token is needed) then display the appropriate word
  based on token. Aside from this, the only thing that needs to be done
  is look up a word in *reverse* based on its XT, and display that if
  it is present. If it isn't, we can assume it's a literal and just
  include it. Alternatively, we can understand LIT_CELL and other key
  words as look ahead words and not include them. Or, on the other
  hand, we could just naively display the internal representation and
  not worry about things like THEN and LIT_CELL. This is the easiest
  solution and is probably a perfectly reasonable place to start.

General Builtins
----------------
- Implement S>D.
- Implement FM/MOD and SM/DIV.
- Implement M* and */MOD.
- Implement the PAGE builtin using escape sequences. The following
  implementation works:
        : page s\" \e[2J\e[0;0H" type ;
- Implement the AT-XY builtin using pictured numeric output and escape
  the ASCII cursor position escape sequence \033[<L>;<C>H. The
  following implementation works:
        : at-xy
            s>d rot s>d
            <#
                'H' hold
                #s 2drop
                ';' hold
                #s
                '[' hold
                27 hold
            #> type
            ;
- Consider adding _NF variants to USERVAR declaration macros, defining
  e4__UV_BEGIN, and simply defining BEGIN as its own uservar rather
  than in terms of HERE using PUN macros. Consider also removing pun
  macros.
- Implement the ENVIRONMENT? builtin.

General IO
----------
- Implement pictured numeric output.

Kernel
------
- [DONE] Add support for multiplying into a double cell number.
- [DONE] Add support for dividing a double cell number by a single cell
  number and obtaining a single cell result (needed for FM/MOD and
  SM/REM).
- [DONE] Add support for dividing a double cell number by a single cell
  number and obtaining a double cell result (needed for #).
- [DONE] Combine sdiv and smod utility functions into one function.
- Add support for adding a single cell number to a double cell number
  (which is needed for >NUMBER). It may be assumed that the single cell
  number is signed (as in M+).
- Update words meant to support double width numbers that are currently
  implemented without any such support. This includes >NUMBER.
- Note somewhere that all divisions are symmetric by default.
  Alternatively, consider the benefits of switching to floored division
  by default.
- Handle dictionary overflows and other overflows.
- Improve exception printing implementation and other hackish printing
  implementations (such as the . builtin etc.) by using pictured
  numeric output instead?
- Consider whether it might be possible to wrap the main quit loop in
  some kind of exception context (somehow?) to get around the race
  condition created by using multiple different exception contexts
  within that loop. It's unclear exactly how this would look since
  the quit loop relies on certain exceptions percolating all the way
  up, so for it to itself run in an exception context some considerable
  refactoring might be necessary. This is important because on embedded
  systems, or even in a repl where a signal can be caught, it may be
  desirable to throw an exception when quit, as currently implemented,
  is not in an interrupt context. This *may* not be an issue (failure
  to actually throw is always something an API client can work around),
  but it probably isn't entirely desirable.

REPL
----
- Source ~/.e4-editrc to allow for e4 specific input overrides. For
  example, tab completion on tab could be disabled by macro binding
  the tab key to two or four spaces.

Testing
-------
- [DONE] Split e4t__test_util_doublemath into multiple tests after the
  num to usize/double split.


Version 0.4
===========

Kernel
------
- Add full support for double cell numbers (including arithmetic, the
  text interpreter extension for numbers of the format XXXX. as outlined
  in section 8.3.1 of the standard, etc.) by implementing all (or most)
  of the DOUBLE word set.


Version 0.9
===========

(things to have done prior to 1.0)

Compilation
-----------
- Implement AHEAD?
- Implement some system +LOOP word that executes LOOP/LOOP+ execution
  semantics to save RAM space? This can be done using the same
  return stack manipulation techniques used for words like R@ and J.

Documentation
-------------
- Document all implementation-defined behavior as per Forth 2012 4.1.1.
- Document all ambiguous condition handling as per Forth 2012 4.1.2.
- Provide other system documentation as per by Forth 2012 4.1.3.
- Document the fact that excluding the exception wordlist does not
  actually disable exceptions. Even with the exceptions wordlist
  excluded, exceptions are still used internally; it's just that the
  CATCH and THROW builtin words are not available.

Kernel
------
- Consider adding optional IO handlers to allow for supporting the
  FILE wordset. If this is done, also add FILE related builtins
  and the appropriate hooks to the REPL.
- Consider adding builtin POSIX handlers for file IO that can be
  enabled/disabled (off by default) at compile time.
- Consider making return stack coherence tracking optional at compile-
  time to allow for RAM savings.
- Throw address alignment exceptions (-23) where appropriate? On one
  hand, this could be a nice way to avoid performance issues. On the
  other hand, on some systems unaligned access is fine.
- Consider adding an e4__stack_rclear API and using where appropriate.
- Consider adding some kind of NO_INTERPRET or INTERNAL flag for words
  that can never be used correctly (whether interpreting or compiling)
  from a non-system context (for instance, BRANCH, BRANCH0, and LIT_*
  as currently implemented). Making words that need to have some effect
  compile only and immediate then checking whether compiling as a hack
  is not sufficient because those words may be called from a word
  marked IMMEDIATE. Alternatively, some other word to bake in addresses
  (such as [LIT]), which risky, could be handy. With such a word, it
  would be possible to write things like : SKIP BRANCH [LIT] 1 ; (which
  itself is also more risky than useful, although that doesn't mean
  there could be no reasonable application). As an alternative, these
  words could be given some kind of "hidden" flag so that it isn't
  possible to look them up.

General Builtins
----------------
- Consider implementing the entire Programming-Tools word set.
- Determine whether CR should actually output \r\n. If it should,
  ensure that \r\n is used instead of \n in all places where \n is
  currently in use.
- Implement S", S\", and C" run time semantics. These words should
  use the designated transient memory buffers as necessary during
  runtime. Last offset can be tracked, modulo style, and only spill
  over if a buffer is too long to fit. This is needed for the FILE
  word set, but is probably expressly non-desirable for minimal
  builds since being standards complient requires reserving 160 bytes
  of memory minimum and it is not specified that this memoery can be
  overrun by dictionary changes, meaning it is expected to be
  dedicated. As such, this should almost certianly live behind some
  compiler flag (perhaps the file word set compiler flag?) and it is
  decidedly not a high priority.

REPL
----
- Split REPL source into multiple files? (For instance, one file for
  auto-completion related logic, one file for signal handling related
  logic/init/uninit/etc., one file for e4 IO handlers, main.c, and
  a header file to tie it all together).

Testing
-------
- Add tests for every builtin word as prescribed by the standard.


Transfer Station
================

(won't do lists; cleared after each release)

Kernel
------
- Add more two's complement utility macros as needed and use them where
  appropriate. -- Wow, this really needs to go away. We have plenty of
  two's complement utility macros.
