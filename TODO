General TODO
============

Repo Maintenance
----------------
- Add license text to all source files.
- Update README.rst to actually explain this project.

Build
-----
- Add an amalgamated source target using amal.rb.
- Create a repl build that uses the amalgamated source target.

Documentation
-------------
- Document all implementation-defined behavior as per Forth 2012 4.1.1.
- Document all ambiguous condition handling as per Forth 2012 4.1.2.
- Provide other system documentation as per by Forth 2012 4.1.3.


Version 0.1
===========

Parsing/Text Execution
----------------------
- [DONE] Implement WORD (builtin)
- [DONE] Make existing LOOKUP C API case insensitive?
- Fix e4__mem_word implementation to correctly advance >IN and also
  to pay attention to count. The API should probably take a mutable
  offset pointer as well as an overall max.
- Implement NUMBER> (builtin/C API)
- Implement LOOKUP (builtin; should be case insensitive)
- Implement EXECUTE (builtin).
- Implement EVALUATE (builtin/C API) (including figuring out how this
  interacts with TIB and appropriately setting SOURCE-IO).

General Builtins
----------------
- Implement basic static manipulation words like DUP, DROP, TUCK, etc.
- Implement compiletime BRANCH0, BRANCH, etc.
- Implement different code handlers _constant, _variable, _thunk, and
  _uservar.
- Add mechanism for builtin constants (such as BL, etc.).

Kernel
------
- Implement exceptions using the return stack.
- Figure out stack underflow checking for builtins etc.
- Implement QUIT using setjmp/longjmp.

Compilation
-----------
- Implement simple : compilation.
- Implement VARIABLE and CONSTANT.
- Implement DOES>.

Testing
-------
- Create test harness and add tests for every builtin word as
  prescribed by the standard.

REPL
----
- Create actual simple REPL using readline or some other utility.


Version 0.2
===========

Compilation
-----------
- Add conditional structure words like IF, THEN, BEGIN, WHILE, LOOP,
  DO, etc.
- Figure out how to implement RECURSE.
