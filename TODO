General TODO
============

Repo Maintenance
----------------
- Add license text to all source files.
- Update README.rst to actually explain this project.
- Add C++ include guards to all headers.

Build
-----
- Add an amalgamated source target using amal.rb.
- Create a repl build that uses the amalgamated source target.
- Make it possible to disable core extensions for an even smaller build.
- Attempt to set up an AVR build (or some other 8-16 bit target build)
  to determine ROM size in that environment.

Documentation
-------------
- Document all implementation-defined behavior as per Forth 2012 4.1.1.
- Document all ambiguous condition handling as per Forth 2012 4.1.2.
- Provide other system documentation as per by Forth 2012 4.1.3.


Version 0.1
===========

Parsing/Text Execution
----------------------
- [DONE] Implement WORD (builtin)
- [DONE] Make existing LOOKUP C API case insensitive?
- [DONE] Fix WORD implementation to correctly advance >IN and also
  to pay attention to count.
- [DONE] Implement >NUMBER (builtin/C API)
- [DONE] Reverse mem_parse API to match mem_number API semantics.
- Create e4__io_refill function and use where appropriate rather than
  calling builtin directly.
- Determine if KEY should be writing to TIB.
- Implement ' (LOOKUP builtin; should be case insensitive)
- Implement EXECUTE (builtin).

General Builtins
----------------
- [DONE] Implement basic static manipulation words CLEAR, DEPTH, DROP,
  DUP, OVER, ROT, ROLL, SWAP, and TUCK.
- [DONE] Implement REFILL.
- Implement CR.
- Implement HERE and ALLOT.
- Implement @ and !.
- Implement simple IO builtins ., U., and EMIT.
- Implement compiletime BRANCH0, BRANCH, etc.
- Implement FORGET. It should stop looking once it hits builtin words.
- Implement different code handlers _constant, _variable, _thunk, and
  _uservar.
- Add mechanism for builtin constants (such as BL, etc.).
- Add appropriate asserts to all existing builtins.

Kernel
------
- [DONE] Move entire builtin dictionary into ROM.
- [DONE] Get rid of fields like POB and SQ and just use HERE instead
  to save space. The dedicated static PAD space can stay.
- [DONE] Create custom integer types that are the same width as e4__cell
  and use these where appropriate (as opposed to unsigned long etc.).
- [DONE] Creating custom integer types for u8 and bool as well rather
  than simply using char.
- [DONE] Implement numeric signed division.
- [DONE] Implement preliminary evaluate utility function.
- [DONE] Implement exceptions using setjmp/longjmp.
- [DONE] Implement QUIT using exceptions etc.
- Cleanup evaluate_quit implementation by refactoring "mode" into flags
  and using that rather than the TIB hack.
- Figure out stack underflow checking for builtins etc.

General IO
----------
- [DONE] Implement two's complement integer formatting.

Compilation
-----------
- [DONE] Refactor dict API into mem_dict API.
- [DONE] Add true dict API that allows creating a new dict entry by
  acting on the task struct and updating HERE and other fields
  appropriately.
- Implement simple : compilation.
- Implement VARIABLE and CONSTANT.
- Implement DOES>.

Testing
-------
- [DONE] Create a test harness.
- [DONE] Finalize test harness organization.
- [DONE] Migrate digit formatting tests.
- [DONE] Migrate basic two's complement tests.
- [DONE] Migrate two's complement signed division tests.
- [DONE] Migrate numeric parsing tests.
- [DONE] Migrate builtin word parsing tests.
- [DONE] Migrate stack API tests.
- [DONE] Migrate >NUMBER builtin tests.
- [DONE] Migrate builtin WORD tests.
- [DONE] Migrate dict entry creation tests.
- [DONE] Add exception tests (see uncommitted diff).
- Add tests for every builtin word as prescribed by the standard.

REPL
----
- Create actual simple REPL using readline or some other utility.


Version 0.2
===========

Compilation
-----------
- Add conditional structure words like IF, THEN, BEGIN, WHILE, LOOP,
  DO, etc.
- Figure out how to implement RECURSE.

Kernel
-----
- Add support for double cell numbers (including arithmetic etc.).
- Update words meant to support double width numbers that are currently
  implemented without any such support. This includes >NUMBER.
- Add more two's complement utility macros as needed and use them where
  appropriate.
- Implement signed modulo and other single width math operators.
- Implement user table access code handlers.

General IO
----------
- Implement pictured numeric output.

General Builtins
----------------
- Implement S", S\", and C". These words should use transient memory
  (possibly just HERE) during runtime, but during compile time they
  should compile a string directly into the definition as appropriate.
  This can be achieved by including some word STRING (similar to LIT)
  in the thread that pushes the subsequent counted string onto the
  stack as appropriate and advances the instruction pointer. The
  string should be compiled directly into the definition *with* end
  padding to align.
- Implement EVALUATE (builtin)
- Implement signed and unsigned single width arithmetic builtins.
- Implement user table builtins.
- Consider implementing the Programming-Tools word set.
