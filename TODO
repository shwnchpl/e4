General TODO
============

Repo Maintenance
----------------
- Add license text to all source files.
- Consider updating project to use GPL or Apache license.
- Update README.rst to actually explain this project.
- Add C++ include guards to all headers.

Build
-----
- Attempt to set up an 8-bit STM8 build (specifically, targetting the
  STM8S-DISCOVERY - UM0817). This will involve making some code changes
  to make sdcc happy (which is a good thing in-and-of itself). It may
  also be worth considering setting up some kind of SDCC test target.


Version 0.3
===========

Build
-----
- [DONE] Split the e4__num namespace into e4__double and e4__usize.
- Test minimal REPL build on an Arduino MKR Zero.

Compilation
-----------
- [DONE] Add conditional structure words CASE OF ENDCASE ENDOF etc.

Documentation
-------------
- Create initial documentation framework.
- State that all e4 related variables must be stored in the same
  address space. This limitation makes it impossible to store constant
  values in flash on architectures where ROM variables must be stored
  in a different address space (for example, some 8-bit AVR chips). In
  theory, it might be possible to work around this to some extent by
  providing hooks to allow the user to define things like e4__DEREF to
  check how a variable should be accessed and e4__ROM to declare a
  constant as belong in ROM (on AVR, this could potentially be done
  using some custom linker script and __flash; it may also be possible
  to somehow use __memx in the type for e4__cell and work around needing
  to set e4__DEREF entirely), but for now support is limited to systems
  that can (somehow) fit all of e4 into one address space (which, for
  now, unfortunately means no ATMega328p etc).
- Note somewhere that all divisions are symmetric by default.
  Alternatively, consider the benefits of switching to floored division
  by default.

General Builtins
----------------
- [DONE] Implement S>D.
- [DONE] Implement FM/MOD and SM/REM.
- [DONE] Implement M* and UM*.
- [DONE] */ and */MOD.
- [DONE] Implement <#, #>, #, #S, HOLD, HOLDS, and SIGN.
- [DONE] Fix 2* and 2/ implementations. These words are meant to perform
  arithmetic shifts by one, not simply logical shifts by one.
- [DONE] Implement the PAGE builtin using escape sequences.
- [DONE] Implement the AT-XY builtin using pictured numeric output and
  escape sequences.
- [DONE] Implement the KEY? builtin.
- [DONE] Implement TIME&DATE.
- [DONE] Implement MS.
- Implement [IF], [ELSE], and [THEN].
- Move the C" builtin to CORE-EXT, where it belongs.
- Implement ENVIRONMENT?.
- Implement STATE, >IN, and SOURCE.
- Implement ABORT".
- Implement ACCEPT.
- Implement FIND.
- Implement UM/MOD.
- Verify that all CORE builtins have been implemented.
- Consider adding _NF variants to USERVAR declaration macros, defining
  e4__UV_BEGIN, and simply defining BEGIN as its own uservar rather
  than in terms of HERE using PUN macros. Consider also removing pun
  macros.

General IO
----------
- [DONE] Add initial PNO utility functions.
- [DONE] Implement pictured numeric output kernel APIs.

Kernel
------
- [DONE] Add support for multiplying into a double cell number.
- [DONE] Add support for dividing a double cell number by a single cell
  number and obtaining a single cell result (needed for FM/MOD and
  SM/REM).
- [DONE] Add support for dividing a double cell number by a single cell
  number and obtaining a double cell result (needed for #).
- [DONE] Combine sdiv and smod utility functions into one function.
- [DONE] Improve exception printing implementation and other hackish
  printing implementations (such as the . builtin etc.) by using
  pictured numeric output instead.
- Consider moving MS and TIME&DATE handlers into e4/core behind some
  POSIX handlers inclusion flag.
- Use checked allocation everywhere that HERE is manipulated. WORD is
  specifically allowed to dip into the PNO buffer but not PAD.
- Ensure, somehow, that the PNO buffer is always at least 33 characters
  (which is a requirement of WORD). On a system where e4__USIZE_BIT is
  greater than or equal to 16, this will always be the case.
- Add support for adding a single cell number to a double cell number
  (which is needed for >NUMBER). It may be assumed that the single cell
  number is signed (as in M+).
- Update words meant to support double width numbers that are currently
  implemented without any such support. This includes >NUMBER.
- Handle dictionary overflows and other overflows.
- Remove non-pno numeric formatting utilities.

REPL
----
- Source ~/.e4-editrc to allow for e4 specific input overrides. For
  example, tab completion on tab could be disabled by macro binding
  the tab key to two or four spaces.
- Create REPL task buffer size to something much larger (32K? 8M?)
  and/or allow for setting buffer size via a command line argument or
  environment variable.

Testing
-------
- [DONE] Split e4t__test_util_doublemath into multiple tests after the
  num to usize/double split.
- Consider splitting exceedingly long builtin tests into multiple
  functions. Current candidates for splitting include doublemath,
  logic, math, and memmanip in particular.
- Consider splitting builtin tests into multiple files, possibly even
  in a builtin/ test directory.


Version 0.4
===========

General Builtins
----------------
- Implement remaining CORE EXT builtins.
- Add FILE and some FILE EXT word sets impls.

Kernel
------
- Consider providing optional POSIX handlers for file IO. These could
  be enabled/disabled at compile time.

Repl
----
- Try running some the Tetris program again.
- Make it so that it is possible to automatically include/execute a
  file that has been specified as a command line argument. That is
  to say, doing this:
        $ e4 foo.fth
  should produce the same result as doing this:
        $ e4
        s" foo.fth" included


Version 0.5
===========

Compilation
-----------
- Implement decompilation (ie. SEE). To start, simply naively display
  the internal representation. The fully naive approach, for words with
  the threaded_execute handler, is to simply search the dictionary
  linearly for each word to see if any entry has each address as an
  execution token. If it does, display the name corresponding to that
  entry. If not, simply display the address. This isn't terribly
  efficient, but it doesn't require storing any references from XT to
  dictionary entry or any other metadata, so it is probably sufficient.
  Output can look something like this for threaded code.
    : foo 2 2 dup . ; see foo
        : foo ( threaded - user: 0x0 )
            LIT_CELL
            0x2
            LIT_CELL
            0x2
            DUP
            .
            EXIT
            SENTINEL

Kernel
------
- Add full support for double cell numbers (including arithmetic, the
  text interpreter extension for numbers of the format XXXX. as outlined
  in section 8.3.1 of the standard, etc.) by implementing all (or most)
  of the DOUBLE word set.
- Consider whether it might be possible to wrap the main quit loop in
  some kind of exception context (somehow?) to get around the race
  condition created by using multiple different exception contexts
  within that loop. It's unclear exactly how this would look since
  the quit loop relies on certain exceptions percolating all the way
  up, so for it to itself run in an exception context some considerable
  refactoring might be necessary. This is important because on embedded
  systems, or even in a repl where a signal can be caught, it may be
  desirable to throw an exception when quit, as currently implemented,
  is not in an interrupt context. This *may* not be an issue (failure
  to actually throw is always something an API client can work around),
  but it probably isn't entirely desirable.


Version 0.9
===========

(things to have done prior to 1.0)

Build
-----
- Split system required words and optional system specific extension
  words into different modules (SYSTEM and SYSTEM-EXT?).

Compilation
-----------
- Implement AHEAD?
- Implement some system +LOOP word that executes LOOP/LOOP+ execution
  semantics to save RAM space? This can be done using the same
  return stack manipulation techniques used for words like R@ and J.
- Ensure that ] is standards compliant. It seems that it should be, but
  there is a somewhat confusing note in second 6.1.2250 "STATE" that
  may require more investigation.

Documentation
-------------
- Document all implementation-defined behavior as per Forth 2012 4.1.1.
- Document all ambiguous condition handling as per Forth 2012 4.1.2.
- Provide other system documentation as per by Forth 2012 4.1.3.
- Document the fact that excluding the exception wordlist does not
  actually disable exceptions. Even with the exceptions wordlist
  excluded, exceptions are still used internally; it's just that the
  CATCH and THROW builtin words are not available.

Kernel
------
- Consider adding optional IO handlers to allow for supporting the
  FILE wordset. If this is done, also add FILE related builtins
  and the appropriate hooks to the REPL.
- Consider adding builtin POSIX handlers for file IO that can be
  enabled/disabled (off by default) at compile time.
- Consider making return stack coherence tracking optional at compile-
  time to allow for RAM savings.
- Throw address alignment exceptions (-23) where appropriate? On one
  hand, this could be a nice way to avoid performance issues. On the
  other hand, on some systems unaligned access is fine.
- Consider adding an e4__stack_rclear API and using where appropriate.
- Consider adding some kind of NO_INTERPRET or INTERNAL flag for words
  that can never be used correctly (whether interpreting or compiling)
  from a non-system context (for instance, BRANCH, BRANCH0, and LIT_*
  as currently implemented). Making words that need to have some effect
  compile only and immediate then checking whether compiling as a hack
  is not sufficient because those words may be called from a word
  marked IMMEDIATE. Alternatively, some other word to bake in addresses
  (such as [LIT]), which risky, could be handy. With such a word, it
  would be possible to write things like : SKIP BRANCH [LIT] 1 ; (which
  itself is also more risky than useful, although that doesn't mean
  there could be no reasonable application). As an alternative, these
  words could be given some kind of "hidden" flag so that it isn't
  possible to look them up.

General Builtins
----------------
- Consider implementing the entire Programming-Tools word set.
- Determine whether CR should actually output \r\n. If it should,
  ensure that \r\n is used instead of \n in all places where \n is
  currently in use.
- Implement S", S\", and C" run time semantics. These words should
  use the designated transient memory buffers as necessary during
  runtime. Last offset can be tracked, modulo style, and only spill
  over if a buffer is too long to fit. This is needed for the FILE
  word set, but is probably expressly non-desirable for minimal
  builds since being standards complient requires reserving 160 bytes
  of memory minimum and it is not specified that this memoery can be
  overrun by dictionary changes, meaning it is expected to be
  dedicated. As such, this should almost certianly live behind some
  compiler flag (perhaps the file word set compiler flag?) and it is
  decidedly not a high priority.

REPL
----
- Split REPL source into multiple files? (For instance, one file for
  auto-completion related logic, one file for signal handling related
  logic/init/uninit/etc., one file for e4 IO handlers, main.c, and
  a header file to tie it all together).

Testing
-------
- Add tests for every builtin word as prescribed by the standard.


Transfer Station
================

(won't do lists; cleared after each release)

Build
-----
- Attempt to set up an AVR build (or some other 8-16 bit target build)
  to determine ROM size in that environment. (Preliminary size optimized
  builds seem to be at around 21K when targeting the ATMega328p).
    -- Unfortunately, because it is not trivial to store constants in
       flash memory and read them back in the same way as variables
       stored in SRAM on the 8-bit AVR archetecture, this is not
       trivial. Punting for now in favor of an STM8 build.

Kernel
------
- Add more two's complement utility macros as needed and use them where
  appropriate. -- Wow, this really needs to go away. We have plenty of
  two's complement utility macros.
- Consider the benefits of making the word parsing/PNO area a fixed
  buffer (similar to the area returned by PAD) rather than simply using
  the memory pointed to by HERE. Currently, word parsing can overflow
  the dictionary and there may not be enough space available to provide
  a buffer as large as the standard requires. On the flip side, the
  benefit to the current approach is that it is possible to use the
  memory that would be reserved for the PNO buffer for something other
  that pictured numeric output (ie. additional definitions) if that is
  for some reason desired on a severely memory constrained system.
  Presumably the same argument could be made about the dedicated region
  returned by PAD (currently implemented as a fixed region), which is
  also something to consider.
    -- The PNO buffer need not be fixed, but the minimum required space
       should always be reserved. There is no harm in a fixed PAD
       because while there is no standards compliant way to check
       how much space is available in PAD, that amount of space may not
       be variable.
- Consider actually typedefing e4__double. Normally structs in e4 are
  not typedefed, although since struct e4__double is relatively small
  and is always passed/returned by value rather than by reference, it
  may make sense to simply typedef away the fact that it is a struct
  in the first place as a special case. I'm currently leaning towards
  not doing this, but it is still worth consideration.
    -- This would just be too inconsistent with the way that structs
       are treated elsewhere in e4 and would violate the principal of
       least astonishment for no real reason. Better to just not do it.

Repl
----
- Try running the modified ANS 94 Forth Tetris program from Rosetta
  Code.
    -- This doesn't work well yet. Perhaps it will be worth revisiting
       once the remaining words from CORE, CORE EXT, and the file word
       set have been implemented.
