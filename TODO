General TODO
============

Repo Maintenance
----------------
- Add license text to all source files.
- Update README.rst to actually explain this project.
- Add C++ include guards to all headers.

Build
-----
- Make it possible to specify e4__DISABLE_EXTENSIONS (or some other
  similar macro) to build the smallest version of e4 possible. This
  can include the exceptions word set and some words from the tools
  word set, but should include no core extensions or any functions
  that are only used by core extensions.
- Create a REPL build that uses an e4__DISABLE_EXTENSIONS build to
  ensure that e4 always builds correctly in this mode.
- Attempt to set up an AVR build (or some other 8-16 bit target build)
  to determine ROM size in that environment. (Preliminary size optimized
  builds seem to be at around 21K when targeting the ATMega328p).


Version 0.2
===========

Compilation
-----------
- [DONE] Implement compiletime BRANCH and BRANCH0 builtins.
- [DONE] Add conditional structure words like IF, ELSE, and THEN.
- [DONE] Implement RECURSE. This is easy to do since RECURSE only needs
  to compile in the address of the XT of the current dictionary entry.
- [DONE] Implement  BEGIN, UNTIL, AGAIN, WHILE, and REPEAT.
- [DONE] Implement DO, ?DO, LOOP, LOOP+, and LEAVE.
- [DONE] Implement I, J, and UNLOOP.
- [DONE] Rename LITERAL to LIT_CELL and DLITERAL to LIT_DOES.
- [DONE] Implement LITERAL.
- [DONE] Implement [ and ].
- [DONE] Implement MARKER.
- [DONE] Implement LIT_CSTR and LIT_STR.
- Add POSTPONE and IMMEDIATE words.
- Consider adding a COMPILE-ONLY/RESTRICT word.
- Check for nested compilation everywhere relevant.

General Builtins
----------------
- [DONE] Implement core builtin logic/comparison words: = < > 0< 0= AND
  INVERT NEGATE OR XOR.
- [DONE] Implement *.
- [DONE] Implement /, MOD, /MOD.
- [DONE] Implement U<.
- [DONE] Add macro handling for implementing some builtins as threaded
  code and refactor those builtins to be  implemented in threaded code.
- [DONE] Throw division by zero exceptions where necessary.
- [DONE] Refactor builtin XT table to not include unused data field.
- [DONE] Implement core extension logic/comparison words: 0<> 0> <> U>.
- [DONE] Implement ( and \.
- [DONE] Implement 1+, 1-, 2*, 2/, LSHIFT, and RSHIFT.
- [DONE] Implement CELL+, CHAR+, and CHARS.
- [DONE] Implement ALIGN and ALIGNED.
- [DONE] Implement C@, C,, and C!.
- [DONE] Implement >R, R>, R@.
- [DONE] Implement MIN and MAX.
- [DONE] Implement HEX and DECIMAL.
- [DONE] Add support for "pun" builtins (builtins that simply execute
  another builtin, potentially with different flags). Update the BEGIN
  implementation in this way (as compiletime immediate HERE).
- [DONE] Implement NIP and PICK.
- [DONE] Implement 2DUP, 2DROP, 2OVER, 2SWAP.
- [DONE] Implement 2!, 2@, and +!.
- [DONE] Implement 2>R, 2R>, and 2R@.
- [DONE] Use 2DUP, 2DROP, etc. where appropriate (in builtin
  definitons).
- [DONE] Implement COUNT and TYPE.
- [DONE] Implement C", S", and ." (compile time semantics only).
- Implement ABS.
- Implement FILL.
- Implement UNUSED.
- Implement .", S", and C" run time semantics. These words should use
  the designated transient memory buffers as necessary during runtime.
- Implement S\".
- Consider whether PARSE (or some e4__io_parse API) should be used for
  words like ." and S" to remove the 255 character length limitation
  imposed by using WORD.
- Implement EVALUATE (builtin)
- Implement THROW and CATCH builtins.
- Make IMMEDIATE/COMPONLY flag specification order consistent in
  builtin declarations.

Kernel
------
- [DONE] Throw exceptions in the event of return stack corruption.
- [DONE] Ensure tr0 always has a coherent value, especially across
  exceptions. To make tr0 always have a coherent value, it will be
  necessary to at least set it to r0 on task initialization and preserve
  its value across exceptions.
- Add e4__task_interrupt API. This API can be called from a signal
  handler or an ISR (as long as the e4__task is *known* not to be
  running) and it sets a flag in the task that will throw an
  e4__E_INTERRUPTED exception from threaded_execute as soon as
  possible. This can be used by REPLs as a way of handling SIGINT
  etc. Once this is implemented, test it out in the REPL. Consider
  how to implement this so that it doesn't behave oddly when waiting
  for input. One idea is that execution depth could be counted in
  e4__thread_execute (possibly nice to have for other reasons as
  well) and the flag could be set only in cases when that value
  is non-zero, although this would have the unfortunate side effect
  of needing to track yet another thing across exceptions.
- Add asserts that execute_tuple and execute_token field order lines
  up correctly.
- Handle dictionary overflows and other overflows. Especially
  dictionary overflow.
- Consider improving exception printing (ie. printing exception name
  along with number).

REPL
----
- [DONE] Add tab-completion to the repl.
- Implement a custom signal handler or custom signal handlers so that
  it's possible to handle SIGINT and call e4__task_interrupt, once
  it has been implemented. Signal handlers will need to take
  appropriate action to keep libedit happy as well (in particular, it
  is necessary to call el_resize upon receipt of SIGWINCH).

Testing
-------
- [DONE] Figure out some way to cover return stack corruption in tests.
- Cover user IO errors in tests (ie. user provided IO handler returns
  non-zero).
- Add tests to ensure that compile time coherence tracking (with tr0)
  behaves correctly when exceptions are disabled, including in cases
  when e4__execute_ret are called when there is nothing on the return
  stack.
- Cover the fact that ip is set to NULL after an exception.
- Cover return stack underflow in the event of a direct call to
  e4__execute_ret.
- Cover tr0 coherence (with and without exceptions enabled) in tests.
  This will be easier to fully cover once exceptions are enabled.


Version 0.3
===========

Compilation
-----------
- Add conditional structure words CASE OF ENDCASE ENDOF etc.
- Implement decompilation (ie. SEE). This only needs to work for words
  defined with execute_threaded to start; everything else can just
  display "builtin." The key way that this can be achieved is by
  placing a special sentinel value on the stack *after* the final EXIT
  call (this can be written by ;). The only other issue is how to
  handle words like THEN etc. This can be done with a little bit of
  look ahead state. If we know that IF is followed by BRANCH then some
  address, then we can simply keep track of what that address is and
  output THEN when we get to that address. We can use the stack for
  this. On function entry, track initial stack count. When IF is
  encountered, push THEN token (assuming we will need to do this with
  something other than THEN as well; we may not, in which case only
  an address is necessary) followed by an address. On each pass, before
  writing anything else, if stack depth is greater than initial depth,
  peek the top. If we're at that address, pop (once or twice, depending
  on whether a THEN token is needed) then display the appropriate word
  based on token. Aside from this, the only thing that needs to be done
  is look up a word in *reverse* based on its XT, and display that if
  it is present. If it isn't, we can assume it's a literal and just
  include it. Alternatively, we can understand LIT_CELL and other key
  words as look ahead words and not include them. Or, on the other
  hand, we could just naively display the internal representation and
  not worry about things like THEN and LIT_CELL. This is the easiest
  solution and is probably a perfectly reasonable place to start.

General IO
----------
- Implement pictured numeric output.

Kernel
------
- Add support for double cell numbers (including arithmetic, the text
  interpreter extension for numbers of the format XXXX. as outlined in
  section 8.3.1 of the standard, etc.).
- Update words meant to support double width numbers that are currently
  implemented without any such support. This includes >NUMBER.
- Add more two's complement utility macros as needed and use them where
  appropriate.

REPL
----
- Source ~/.e4-editrc to allow for e4 specific input overrides. For
  example, tab completion on tab could be disabled by macro binding
  the tab key to two or four spaces.


Version 0.9
===========

(things to have done prior to 1.0)

Compilation
-----------
- Implement AHEAD?
- Implement some system +LOOP word that executes LOOP/LOOP+ execution
  semantics to save RAM space? This can be done using the same
  return stack manipulation techniques used for words like R@ and J.

Documentation
-------------
- Document all implementation-defined behavior as per Forth 2012 4.1.1.
- Document all ambiguous condition handling as per Forth 2012 4.1.2.
- Provide other system documentation as per by Forth 2012 4.1.3.

Kernel
------
- Consider adding optional IO handlers to allow for supporting the
  FILE wordset. If this is done, also add FILE related builtins
  and the appropriate hooks to the REPL.
- Consider making return stack coherence tracking optional at compile-
  time to allow for RAM savings.
- Throw address alignment exceptions (-23) where appropriate? On one
  hand, this could be a nice way to avoid performance issues. On the
  other hand, on some systems unaligned access is fine.
- Consider adding an e4__stack_rclear API and using where appropriate.
- Consider adding some kind of NO_INTERPRET or INTERNAL flag for words
  that can never be used correctly (whether interpreting or compiling)
  from a non-system context (for instance, BRANCH, BRANCH0, and LIT_*
  as currently implemented). Making words that need to have some effect
  compile only and immediate then checking whether compiling as a hack
  is not sufficient because those words may be called from a word
  marked IMMEDIATE. Alternatively, some other word to bake in addresses
  (such as [LIT]), which risky, could be handy. With such a word, it
  would be possible to write things like : SKIP BRANCH [LIT] 1 ; (which
  itself is also more risky than useful, although that doesn't mean
  there could be no reasonable application). As an alternative, these
  words could be given some kind of "hidden" flag so that it isn't
  possible to look them up.

General Builtins
----------------
- Consider implementing the entire Programming-Tools word set.
- Determine whether CR should actually output \r\n. If it should,
  ensure that \r\n is used instead of \n in all places where \n is
  currently in use.

Testing
-------
- Add tests for every builtin word as prescribed by the standard.


Transfer Station
================

(won't do lists; cleared after each release)

Kernel
------
- Add more two's complement utility macros as needed and use them where
  appropriate.
    -- There doesn't appear to be any need for more two's complement
       macros.
- Refactor code that takes the size of the execute_token structure and
  subtracts the size of the data field when allocating to take the size
  of an execute_tuple structure instead?
    -- No real reason to do this.
